{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { AuthenticationError } from \"blitz\";\nimport SecurePassword from \"secure-password\";\nimport db from \"db\";\nconst SP = new SecurePassword();\nexport const hashPassword = async password => {\n  const hashedBuffer = await SP.hash(Buffer.from(password));\n  return hashedBuffer.toString(\"base64\");\n};\nexport const verifyPassword = async (hashedPassword, password) => {\n  try {\n    return await SP.verify(Buffer.from(password), Buffer.from(hashedPassword, \"base64\"));\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n};\nexport const authenticateUser = async (email, password) => {\n  const user = await db.user.findOne({\n    where: {\n      email: email.toLowerCase()\n    }\n  });\n  if (!user || !user.hashedPassword) throw new AuthenticationError();\n\n  switch (await verifyPassword(user.hashedPassword, password)) {\n    case SecurePassword.VALID:\n      break;\n\n    case SecurePassword.VALID_NEEDS_REHASH:\n      // Upgrade hashed password with a more secure hash\n      const improvedHash = await hashPassword(password);\n      await db.user.update({\n        where: {\n          id: user.id\n        },\n        data: {\n          hashedPassword: improvedHash\n        }\n      });\n      break;\n\n    default:\n      throw new AuthenticationError();\n  }\n\n  const {\n    hashedPassword\n  } = user,\n        rest = _objectWithoutProperties(user, [\"hashedPassword\"]);\n\n  return rest;\n};","map":{"version":3,"sources":["/Users/loufi/Documents/Epitech/Paas/byop/api/.blitz/caches/dev/app/auth/auth-utils.ts"],"names":["AuthenticationError","SecurePassword","db","SP","hashPassword","password","hashedBuffer","hash","Buffer","from","toString","verifyPassword","hashedPassword","verify","error","console","authenticateUser","email","user","findOne","where","toLowerCase","VALID","VALID_NEEDS_REHASH","improvedHash","update","id","data","rest"],"mappings":";;;;AAAA,SAASA,mBAAT,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,MAAMC,EAAE,GAAG,IAAIF,cAAJ,EAAX;AAEA,OAAO,MAAMG,YAAY,GAAG,MAAOC,QAAP,IAA4B;AACtD,QAAMC,YAAY,GAAG,MAAMH,EAAE,CAACI,IAAH,CAAQC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAR,CAA3B;AACA,SAAOC,YAAY,CAACI,QAAb,CAAsB,QAAtB,CAAP;AACD,CAHM;AAIP,OAAO,MAAMC,cAAc,GAAG,OAAOC,cAAP,EAA+BP,QAA/B,KAAoD;AAChF,MAAI;AACF,WAAO,MAAMF,EAAE,CAACU,MAAH,CAAUL,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAV,EAAiCG,MAAM,CAACC,IAAP,CAAYG,cAAZ,EAA4B,QAA5B,CAAjC,CAAb;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,WAAO,KAAP;AACD;AACF,CAPM;AASP,OAAO,MAAME,gBAAgB,GAAG,OAAOC,KAAP,EAAsBZ,QAAtB,KAA2C;AACzE,QAAMa,IAAI,GAAG,MAAMhB,EAAE,CAACgB,IAAH,CAAQC,OAAR,CAAgB;AAAEC,IAAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAAEA,KAAK,CAACI,WAAN;AAAT;AAAT,GAAhB,CAAnB;AAEA,MAAI,CAACH,IAAD,IAAS,CAACA,IAAI,CAACN,cAAnB,EAAmC,MAAM,IAAIZ,mBAAJ,EAAN;;AAEnC,UAAQ,MAAMW,cAAc,CAACO,IAAI,CAACN,cAAN,EAAsBP,QAAtB,CAA5B;AACE,SAAKJ,cAAc,CAACqB,KAApB;AACE;;AACF,SAAKrB,cAAc,CAACsB,kBAApB;AACE;AACA,YAAMC,YAAY,GAAG,MAAMpB,YAAY,CAACC,QAAD,CAAvC;AACA,YAAMH,EAAE,CAACgB,IAAH,CAAQO,MAAR,CAAe;AAAEL,QAAAA,KAAK,EAAE;AAAEM,UAAAA,EAAE,EAAER,IAAI,CAACQ;AAAX,SAAT;AAA0BC,QAAAA,IAAI,EAAE;AAAEf,UAAAA,cAAc,EAAEY;AAAlB;AAAhC,OAAf,CAAN;AACA;;AACF;AACE,YAAM,IAAIxB,mBAAJ,EAAN;AATJ;;AAYA,QAAM;AAAEY,IAAAA;AAAF,MAA8BM,IAApC;AAAA,QAA2BU,IAA3B,4BAAoCV,IAApC;;AACA,SAAOU,IAAP;AACD,CAnBM","sourcesContent":["import { AuthenticationError } from \"blitz\"\nimport SecurePassword from \"secure-password\"\nimport db from \"db\"\n\nconst SP = new SecurePassword()\n\nexport const hashPassword = async (password: string) => {\n  const hashedBuffer = await SP.hash(Buffer.from(password))\n  return hashedBuffer.toString(\"base64\")\n}\nexport const verifyPassword = async (hashedPassword: string, password: string) => {\n  try {\n    return await SP.verify(Buffer.from(password), Buffer.from(hashedPassword, \"base64\"))\n  } catch (error) {\n    console.error(error)\n    return false\n  }\n}\n\nexport const authenticateUser = async (email: string, password: string) => {\n  const user = await db.user.findOne({ where: { email: email.toLowerCase() } })\n\n  if (!user || !user.hashedPassword) throw new AuthenticationError()\n\n  switch (await verifyPassword(user.hashedPassword, password)) {\n    case SecurePassword.VALID:\n      break\n    case SecurePassword.VALID_NEEDS_REHASH:\n      // Upgrade hashed password with a more secure hash\n      const improvedHash = await hashPassword(password)\n      await db.user.update({ where: { id: user.id }, data: { hashedPassword: improvedHash } })\n      break\n    default:\n      throw new AuthenticationError()\n  }\n\n  const { hashedPassword, ...rest } = user\n  return rest\n}\n"]},"metadata":{},"sourceType":"module"}